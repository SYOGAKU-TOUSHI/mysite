'use strict';

{ // ←これがブロック スコープの開始
	console.log('\n--< let, const >----------------------------');
	// ↑この範囲で変数や定数が有効
	let n1 = 123;    // 変数（値を差し替え可能）
	const n2 = 456;  // 定数（値を差し替え不能）

	console.log('<1-1>', n1, n2);	// 123, 456

	n1 = 789;		// 変数は値を差し替え可能（再代入可能）

	console.log('<1-2>', n1, n2);	// 789, 123

	// ↓この範囲で変数や定数が有効
} // ←これがブロック スコープの終了

{
	console.log('\n--< scope >----------------------------');
	let n1 = 123;    // 変数
	const n2 = 456;  // 定数
		// 同じ階層内で、再度宣言することはできない
		// 同じ階層以下で有効

	console.log('<2-1>', n1, n2);	// 123, 456

	{
		console.log('<2-2>', n1, n2);	// 123, 456
		{
			// 階層が違えば、再度宣言することができる
			// 同じ階層以下で有効
			let n1 = 111;    // 変数
			const n2 = 222;  // 定数

			console.log('<2-3>', n1, n2);	// 111, 222
		}

		// 111, 222　が入った変数は
		// 上の { } を抜ける時に無効になっている
		// 同じ階層の変数の値が利用される
		console.log('<2-4>', n1, n2);	// 123, 456
	}

	console.log('<2-5>', n1, n2);	// 123, 456
}

{
	console.log('\n--< var >----------------------------');
	function hoge() { // ←これが関数スコープの開始
		{
			var n3 = 789;  // 値を差し替え可能な変数
			console.log('<3-1>', n3);	// 789
		}

		// 関数スコープ単位なので
		// ブロック スコープの外でも使える
		console.log('<3-2>', n3);	// 789

		// 同じ階層で、同じ変数名を利用できる
		var n3 = 123;	// 再宣言可能
		console.log('<3-3>', n3);	// 123

	} // ←これが関数スコープの終了
	hoge();
}
